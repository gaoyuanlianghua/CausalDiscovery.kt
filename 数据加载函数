package com.example.causaldiscovery

import org.apache.arrow.memory.BufferAllocator
import org.apache.arrow.vector.VectorLoader
import org.apache.arrow.vector.VectorSchemaRoot
import org.apache.arrow.vector.ipc.ArrowFileReader
import java.io.FileInputStream
import java.nio.channels.Channels

fun loadArrowData(filePath: String): CausalDataset {
    val allocator: BufferAllocator = RootAllocator(Long.MAX_VALUE)
    FileInputStream(filePath).use { inputStream ->
        Channels.newChannel(inputStream).use { channel ->
            val reader = ArrowFileReader(channel, allocator)
            reader.loadNextBatch()
            val root: VectorSchemaRoot = reader.vectorSchemaRoot
            
            val variableNames = root.fieldVectors.map { it.name }
            val data = mutableListOf<List<Double>>()
            
            repeat(root.rowCount) { rowIndex ->
                val row = variableNames.map { varName ->
                    when (val vector = root.getVector(varName)) {
                        is org.apache.arrow.vector.Float8Vector -> vector.get(rowIndex).toDouble()
                        else -> throw UnsupportedOperationException("Unsupported vector type")
                    }
                }
                data.add(row)
            }
            
            return CausalDataset(variableNames, data)
        }
    }
}